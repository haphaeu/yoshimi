import copy
#sudoku game
# m[0] is the first row
# [m[i][0] for i in range(9)] is first col
# {m[i][j] for i in range(3,6) for j in range(3,6)} is the middle box
# m[i][j] is in box i/3,j/3
global m
'''
#grid 01
m=[[0, 0, 3, 0, 2, 0, 6, 0, 0],
   [9, 0, 0, 3, 0, 5, 0, 0, 1],
   [0, 0, 1, 8, 0, 6, 4, 0, 0],
   [0, 0, 8, 1, 0, 2, 9, 0, 0],
   [7, 0, 0, 0, 0, 0, 0, 0, 8],
   [0, 0, 6, 7, 0, 8, 2, 0, 0],
   [0, 0, 2, 6, 0, 9, 5, 0, 0],
   [8, 0, 0, 2, 0, 3, 0, 0, 9],
   [0, 0, 5, 0, 1, 0, 3, 0, 0]]

''
#grid 02
m=[[2, 0, 0, 0, 8, 0, 3, 0, 0],
   [0, 6, 0, 0, 7, 0, 0, 8, 4],
   [0, 3, 0, 5, 6, 0, 2, 0, 9],
   [0, 0, 0, 1, 0, 5, 4, 0, 8],
   [0, 0, 0, 0, 0, 0, 0, 0, 0],
   [4, 0, 2, 7, 0, 6, 0, 0, 0],
   [3, 0, 1, 0, 0, 7, 0, 4, 0],
   [7, 2, 0, 0, 4, 0, 0, 6, 0],
   [0, 0, 4, 0, 1, 0, 0, 0, 3]]
'''
#grid 03
m=[[0, 0, 0, 0, 0, 0, 9, 0, 7],
   [0, 0, 0, 4, 2, 0, 1, 8, 0],
   [0, 0, 0, 7, 0, 5, 0, 2, 6],
   [1, 0, 0, 9, 0, 4, 0, 0, 0],
   [0, 5, 0, 0, 0, 0, 0, 4, 0],
   [0, 0, 0, 5, 0, 7, 0, 0, 9],
   [9, 2, 0, 1, 0, 8, 0, 0, 0],
   [0, 3, 4, 0, 5, 9, 0, 0, 0],
   [5, 0, 7, 0, 0, 0, 0, 0, 0]]
'''
#grid 04
m=[[0, 3, 0, 0, 5, 0, 0, 4, 0],
   [0, 0, 8, 0, 1, 0, 5, 0, 0],
   [4, 6, 0, 0, 0, 0, 0, 1, 2],
   [0, 7, 0, 5, 0, 2, 0, 8, 0],
   [0, 0, 0, 6, 0, 3, 0, 0, 0],
   [0, 4, 0, 1, 0, 9, 0, 3, 0],
   [2, 5, 0, 0, 0, 0, 0, 9, 8],
   [0, 0, 1, 0, 2, 0, 6, 0, 0],
   [0, 8, 0, 0, 6, 0, 0, 2, 0]]
''
#grid 49
m=[[0, 0, 0, 0, 0, 3, 0, 1, 7],
   [0, 1, 5, 0, 0, 9, 0, 0, 8],
   [0, 6, 0, 0, 0, 0, 0, 0, 0],
   [1, 0, 0, 0, 0, 7, 0, 0, 0],
   [0, 0, 9, 0, 0, 0, 2, 0, 0],
   [0, 0, 0, 5, 0, 0, 0, 0, 4],
   [0, 0, 0, 0, 0, 0, 0, 2, 0],
   [5, 0, 0, 6, 0, 0, 3, 4, 0],
   [3, 4, 0, 2, 0, 0, 0, 0, 0]]
''
#grid 50
m=[[3, 0, 0, 2, 0, 0, 0, 0, 0],
   [0, 0, 0, 1, 0, 7, 0, 0, 0],
   [7, 0, 6, 0, 3, 0, 5, 0, 0],
   [0, 7, 0, 0, 0, 9, 0, 8, 0],
   [9, 0, 0, 0, 2, 0, 0, 0, 4],
   [0, 1, 0, 8, 0, 0, 0, 5, 0],
   [0, 0, 9, 0, 4, 0, 3, 0, 1],
   [0, 0, 0, 7, 0, 2, 0, 0, 0],
   [0, 0, 0, 0, 0, 8, 0, 0, 6]]
'''

one9={1,2,3,4,5,6,7,8,9}


def missing(i,j):
    # set with row
    row=one9-set(m[i])
    # set with col
    col=one9-{m[k][j] for k in range(9)}
    #set with box
    rw=(i/3)*3; cl=(j/3)*3
    box=one9-{m[k][l] for k in range(rw,rw+3) for l in range(cl,cl+3)}
    #print row, col, box
    return set.intersection(row,col,box)

def check_game():
    for i in range(9): # check rows
        if not one9.issubset(set(m[i])):
            return False
    for j in range(9): #check cols
        col={m[k][j] for k in range(9)}
        if not one9.issubset(col):
            return False
    for i in range(0,9,3): #check boxes
        for j in range(0,9,3):
            box={m[k][l] for k in range(i,i+3) for l in range(j,j+3)}
            if not one9.issubset(box):
                return False
    return True

#this is recursive, will guess until solved
def guess():
    global m
    for i in range(9):
        for j in range(9):
            if not m[i][j]:
                tmp=missing(i,j)
                if len(tmp)==2:
                    backup=copy.deepcopy(m)
                    m[i][j]=tmp.pop()
                    if fillgrid():
                        return True
                    else:
                        if guess():
                            return True
                        else:
                            m=copy.deepcopy(backup)
                            m[i][j]=tmp.pop()
                            if fillgrid():
                                return True
                            else:
                                if guess():
                                    return True
                                else:
                                    return False
    return False

def fillgrid():
    while fillgrid_onepass():
        pass
    if check_game():
        return True
    else:
        return False

def fillgrid_onepass():
    for i in range(9):
        for j in range(9):
            if not m[i][j]:
                #print i,j,missing(i,j)
                tmp=missing(i,j)
                if len(tmp)==1:
                    m[i][j]=tmp.pop()
                    return True
                #chk neighbors
                rw1=3*(i/3)
                if rw1==i: rw1+=1
                rw2=rw1+1
                if rw2==i: rw2+=1
                cl1=3*(j/3)
                if cl1==j: cl1+=1
                cl2=cl1+1
                if cl2==j: cl2+=1
                row1=set(m[rw1])-{0}
                row2=set(m[rw2])-{0}
                col1={m[k][cl1] for k in range(9)}-{0}
                col2={m[k][cl2] for k in range(9)}-{0}

                tmp2=set.intersection(tmp,row1,row2,col1,col2)
                if len(tmp2)==1:
                    m[i][j]=tmp2.pop()
                    return True
                    
                tmp2=set.intersection(tmp,row1,row2)
                if len(tmp2)==1 and m[i][cl1] and m[i][cl2]:
                    m[i][j]=tmp2.pop()
                    return True
                    
                tmp2=set.intersection(tmp,col1,col2)
                if len(tmp2)==1 and m[rw1][j] and m[rw2][j]:
                    m[i][j]=tmp2.pop()
                    return True
                    
                tmp2=set.intersection(tmp,row1,row2,col1)
                if len(tmp2)==1 and m[i][cl2]:
                    m[i][j]=tmp2.pop()
                    return True

                tmp2=set.intersection(tmp,row1,row2,col2)
                if len(tmp2)==1 and m[i][cl1]:
                    m[i][j]=tmp2.pop()
                    return True

                tmp2=set.intersection(tmp,col1,col2,row1)
                if len(tmp2)==1 and m[rw2][j]:
                    m[i][j]=tmp2.pop()
                    return True

                tmp2=set.intersection(tmp,col1,col2,row2)
                if len(tmp2)==1 and m[rw1][j]:
                    m[i][j]=tmp2.pop()
                    return True
    return False
    


# ### MAIN ###
print "Game:"
for r in m: print r
if not fillgrid():
    if not guess():
        print "DEU PAU!!!"
print "Solution:"
for _ in m: print _
id=m[0][0]*100+m[0][1]*10+m[0][2]
print id

'''
this grid 49 is tricky
the solution is
[[2, 9, 4, 8, 6, 3, 5, 1, 7],
 [7, 1, 5, 4, 2, 9, 6, 3, 8],
 [8, 6, 3, 7, 5, 1, 4, 9, 2],
 [1, 5, 2, 9, 4, 7, 8, 6, 3],
 [4, 7, 9, 3, 8, 6, 2, 5, 1],
 [6, 3, 8, 5, 1, 2, 9, 7, 4],
 [9, 8, 6, 1, 3, 4, 7, 2, 5],
 [5, 2, 1, 6, 7, 8, 3, 4, 9],
 [3, 4, 7, 2, 9, 5, 1, 8, 6]]
'''

'''
Game:
[0, 0, 3, 0, 2, 0, 6, 0, 0]
[9, 0, 0, 3, 0, 5, 0, 0, 1]
[0, 0, 1, 8, 0, 6, 4, 0, 0]
[0, 0, 8, 1, 0, 2, 9, 0, 0]
[7, 0, 0, 0, 0, 0, 0, 0, 8]
[0, 0, 6, 7, 0, 8, 2, 0, 0]
[0, 0, 2, 6, 0, 9, 5, 0, 0]
[8, 0, 0, 2, 0, 3, 0, 0, 9]
[0, 0, 5, 0, 1, 0, 3, 0, 0]
Solution:
[4, 8, 3, 9, 2, 1, 6, 5, 7]
[9, 6, 7, 3, 4, 5, 8, 2, 1]
[2, 5, 1, 8, 7, 6, 4, 9, 3]
[5, 4, 8, 1, 3, 2, 9, 7, 6]
[7, 2, 9, 5, 6, 4, 1, 3, 8]
[1, 3, 6, 7, 9, 8, 2, 4, 5]
[3, 7, 2, 6, 8, 9, 5, 1, 4]
[8, 1, 4, 2, 5, 3, 7, 6, 9]
[6, 9, 5, 4, 1, 7, 3, 8, 2]
483
>>> ================================ RESTART ================================
>>> 
Game:
[2, 0, 0, 0, 8, 0, 3, 0, 0]
[0, 6, 0, 0, 7, 0, 0, 8, 4]
[0, 3, 0, 5, 6, 0, 2, 0, 9]
[0, 0, 0, 1, 0, 5, 4, 0, 8]
[0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 0, 2, 7, 0, 6, 0, 0, 0]
[3, 0, 1, 0, 0, 7, 0, 4, 0]
[7, 2, 0, 0, 4, 0, 0, 6, 0]
[0, 0, 4, 0, 1, 0, 0, 0, 3]
Solution:
[2, 4, 5, 9, 8, 1, 3, 7, 6]
[1, 6, 9, 2, 7, 3, 5, 8, 4]
[8, 3, 7, 5, 6, 4, 2, 1, 9]
[9, 7, 6, 1, 2, 5, 4, 3, 8]
[5, 1, 3, 4, 9, 8, 6, 2, 7]
[4, 8, 2, 7, 3, 6, 9, 5, 1]
[3, 9, 1, 6, 5, 7, 8, 4, 2]
[7, 2, 8, 3, 4, 9, 1, 6, 5]
[6, 5, 4, 8, 1, 2, 7, 9, 3]
245
>>> ================================ RESTART ================================
>>> 
Game:
[0, 0, 0, 0, 0, 0, 9, 0, 7]
[0, 0, 0, 4, 2, 0, 1, 8, 0]
[0, 0, 0, 7, 0, 5, 0, 2, 6]
[1, 0, 0, 9, 0, 4, 0, 0, 0]
[0, 5, 0, 0, 0, 0, 0, 4, 0]
[0, 0, 0, 5, 0, 7, 0, 0, 9]
[9, 2, 0, 1, 0, 8, 0, 0, 0]
[0, 3, 4, 0, 5, 9, 0, 0, 0]
[5, 0, 7, 0, 0, 0, 0, 0, 0]
Solution:
[4, 6, 2, 8, 3, 1, 9, 5, 7]
[7, 9, 5, 4, 2, 6, 1, 8, 3]
[3, 8, 1, 7, 9, 5, 4, 2, 6]
[1, 7, 3, 9, 8, 4, 2, 6, 5]
[6, 5, 9, 3, 1, 2, 7, 4, 8]
[2, 4, 8, 5, 6, 7, 3, 1, 9]
[9, 2, 6, 1, 7, 8, 5, 3, 4]
[8, 3, 4, 2, 5, 9, 6, 7, 1]
[5, 1, 7, 6, 4, 3, 8, 9, 2]
462
>>> check_game()
True
>>> ================================ RESTART ================================
>>> 
Game:
[0, 3, 0, 0, 5, 0, 0, 4, 0]
[0, 0, 8, 0, 1, 0, 5, 0, 0]
[4, 6, 0, 0, 0, 0, 0, 1, 2]
[0, 7, 0, 5, 0, 2, 0, 8, 0]
[0, 0, 0, 6, 0, 3, 0, 0, 0]
[0, 4, 0, 1, 0, 9, 0, 3, 0]
[2, 5, 0, 0, 0, 0, 0, 9, 8]
[0, 0, 1, 0, 2, 0, 6, 0, 0]
[0, 8, 0, 0, 6, 0, 0, 2, 0]
Solution:
[1, 3, 7, 2, 5, 6, 8, 4, 9]
[9, 2, 8, 3, 1, 4, 5, 6, 7]
[4, 6, 5, 8, 9, 7, 3, 1, 2]
[6, 7, 3, 5, 4, 2, 9, 8, 1]
[8, 1, 9, 6, 7, 3, 2, 5, 4]
[5, 4, 2, 1, 8, 9, 7, 3, 6]
[2, 5, 6, 7, 3, 1, 4, 9, 8]
[3, 9, 1, 4, 2, 8, 6, 7, 5]
[7, 8, 4, 9, 6, 5, 1, 2, 3]
137
>>> check_game()
True
>>> ================================ RESTART ================================
>>> 
Game:
[0, 0, 0, 0, 0, 3, 0, 1, 7]
[0, 1, 5, 0, 0, 9, 0, 0, 8]
[0, 6, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 7, 0, 0, 0]
[0, 0, 9, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 5, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 0, 2, 0]
[5, 0, 0, 6, 0, 0, 3, 4, 0]
[3, 4, 0, 2, 0, 0, 0, 0, 0]
Solution:
[2, 9, 4, 8, 6, 3, 5, 1, 7]
[7, 1, 5, 4, 2, 9, 6, 3, 8]
[8, 6, 3, 7, 5, 1, 4, 9, 2]
[1, 5, 2, 9, 4, 7, 8, 6, 3]
[4, 7, 9, 3, 8, 6, 2, 5, 1]
[6, 3, 8, 5, 1, 2, 9, 7, 4]
[9, 8, 6, 1, 3, 4, 7, 2, 5]
[5, 2, 1, 6, 7, 8, 3, 4, 9]
[3, 4, 7, 2, 9, 5, 1, 8, 6]
294
>>> check_game()
True
>>> ================================ RESTART ================================
>>> 
Game:
[3, 0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 7, 0, 0, 0]
[7, 0, 6, 0, 3, 0, 5, 0, 0]
[0, 7, 0, 0, 0, 9, 0, 8, 0]
[9, 0, 0, 0, 2, 0, 0, 0, 4]
[0, 1, 0, 8, 0, 0, 0, 5, 0]
[0, 0, 9, 0, 4, 0, 3, 0, 1]
[0, 0, 0, 7, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 0, 8, 0, 0, 6]
Solution:
[3, 5, 1, 2, 8, 6, 4, 9, 7]
[4, 9, 2, 1, 5, 7, 6, 3, 8]
[7, 8, 6, 9, 3, 4, 5, 1, 2]
[2, 7, 5, 4, 6, 9, 1, 8, 3]
[9, 3, 8, 5, 2, 1, 7, 6, 4]
[6, 1, 4, 8, 7, 3, 2, 5, 9]
[8, 2, 9, 6, 4, 5, 3, 7, 1]
[1, 6, 3, 7, 9, 2, 8, 4, 5]
[5, 4, 7, 3, 1, 8, 9, 2, 6]
351
'''
                

