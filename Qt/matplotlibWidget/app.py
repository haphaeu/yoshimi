# used to parse files more easily
from __future__ import with_statement
# Numpy module
import numpy as np
# for command-line arguments
import sys
# Qt4 bindings for core Qt functionalities (non-GUI)
from PyQt4 import QtCore
# Python Qt4 bindings for GUI objects
from PyQt4 import QtGui
# import the MainWindow widget from the converted .ui files
from mplwidgt import Ui_MainWindow


class DesignerMainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""
    def __init__(self, parent = None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        # connect the signals with the slots
        QtCore.QObject.connect(self.pushButton, 
                               QtCore.SIGNAL("clicked()"), self.plot)
        QtCore.QObject.connect(self.pushButton_2, 
                               QtCore.SIGNAL("clicked()"), self.clear)

    def clear(self):
        self.mpl.canvas.ax.clear()
        self.mpl.canvas.draw()
    def plot(self):
        self.mpl.canvas.ax.clear()
        self.mpl.canvas.ax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 2, 5])
        self.mpl.canvas.draw()
    
        
# create the GUI application
app = QtGui.QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())